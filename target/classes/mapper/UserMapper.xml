<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ec.dao.UserMapper">
  <resultMap id="BaseResultMap" type="cn.ec.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="pid" jdbcType="VARCHAR" property="pid" />
    <result column="mobile_number" jdbcType="VARCHAR" property="mobileNumber" />
    <result column="user_sn" jdbcType="VARCHAR" property="userSn" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="pwd" jdbcType="VARCHAR" property="pwd" />
    <result column="last_password_reset_date" jdbcType="TIMESTAMP" property="lastPasswordResetDate" />
    <result column="enabled" jdbcType="BIT" property="enabled" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
  </resultMap>
  <sql id="Base_Column_List">
    id, pid, mobile_number, user_sn, user_name, pwd, last_password_reset_date, enabled,
    deleted
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.ec.model.User">
    insert into user (id, pid, mobile_number,
      user_sn, user_name, pwd,
      last_password_reset_date, enabled, deleted
      )
    values (#{id,jdbcType=INTEGER}, #{pid,jdbcType=VARCHAR}, #{mobileNumber,jdbcType=VARCHAR},
      #{userSn,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{pwd,jdbcType=VARCHAR},
      #{lastPasswordResetDate,jdbcType=TIMESTAMP}, #{enabled,jdbcType=BIT}, #{deleted,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.ec.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="mobileNumber != null">
        mobile_number,
      </if>
      <if test="userSn != null">
        user_sn,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="pwd != null">
        pwd,
      </if>
      <if test="lastPasswordResetDate != null">
        last_password_reset_date,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=VARCHAR},
      </if>
      <if test="mobileNumber != null">
        #{mobileNumber,jdbcType=VARCHAR},
      </if>
      <if test="userSn != null">
        #{userSn,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="lastPasswordResetDate != null">
        #{lastPasswordResetDate,jdbcType=TIMESTAMP},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.ec.model.User">
    update user
    <set>
      <if test="pid != null">
        pid = #{pid,jdbcType=VARCHAR},
      </if>
      <if test="mobileNumber != null">
        mobile_number = #{mobileNumber,jdbcType=VARCHAR},
      </if>
      <if test="userSn != null">
        user_sn = #{userSn,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        pwd = #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="lastPasswordResetDate != null">
        last_password_reset_date = #{lastPasswordResetDate,jdbcType=TIMESTAMP},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.ec.model.User">
    update user
    set pid = #{pid,jdbcType=VARCHAR},
      mobile_number = #{mobileNumber,jdbcType=VARCHAR},
      user_sn = #{userSn,jdbcType=VARCHAR},
      user_name = #{userName,jdbcType=VARCHAR},
      pwd = #{pwd,jdbcType=VARCHAR},
      last_password_reset_date = #{lastPasswordResetDate,jdbcType=TIMESTAMP},
      enabled = #{enabled,jdbcType=BIT},
      deleted = #{deleted,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getUserById" resultMap="BaseResultMap">
    select
     *
    from
    user
    where id=#{id,jdbcType=INTEGER};
  </select>

  <select id="selectByIdAndPid" resultMap="BaseResultMap">
    select
     *
    from
    user
    where id=#{idd} and pid=#{pdd};
  </select>

  <select id="query" resultMap="BaseResultMap">
    select
     *
    from
    user
    where id=#{id} and pid=#{pid};
  </select>

  <select id="queryByUser" resultMap="BaseResultMap">
    select
     *
    from
    user
    where id=#{id} and pid=#{pid};
  </select>


  <select id="queryByIds" resultMap="BaseResultMap">
    select
     *
    from
    user
    where id in
    <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>


  <select id="queryByUserIds" resultMap="BaseResultMap" parameterType="cn.ec.dto.User">
    select
    *
    from
    user
    where id in
    <foreach collection="ids" item="item" index="index" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>


  <select id="queryByArrayIds" resultMap="BaseResultMap">
    select
    *
    from
    user
    where id in
    <foreach collection="array" item="item" index="index" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>

</mapper>
